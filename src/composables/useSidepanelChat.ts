import { computed, onBeforeUnmount, onMounted, ref, watch } from 'vue'
import { generateArticleAIResponse } from '~/services/aiService'
import { useChatState } from '~/composables/useChatState'
import { useWebExtensionStorage } from '~/composables/useWebExtensionStorage'
import { extractArticleWithDiffbot } from '~/utils/webcrawler'

export function useSidepanelChat() {
  // State
  const currentUrl = ref('ƒêang t·∫£i...')
  const isLoading = ref(false)
  const hasError = ref(false)
  const errorMessage = ref('')
  const crawledContent = ref('')
  const selectedModel = ref('GPT-4.1')
  const availableModels = ['GPT-4.1', 'GPT-4o', 'Claude Sonnet 3.7', 'Claude Haiku']
  const chatMode = ref('Ask')
  const currentFileName = ref('Current Tab')
  const isCrawlerOn = ref(false)
  function setCrawlerOn(val: boolean) { isCrawlerOn.value = val }

  // L∆∞u d·ªØ li·ªáu crawl v√†o storage theo url
  const isValidUrl = computed(() => {
    try {
      const url = new URL(currentUrl.value)
      return !!url
    }
    catch {
      return false
    }
  })

  const crawlStorageKey = computed(() => isValidUrl.value ? `crawl-content:${currentUrl.value}` : '')
  const { data: crawlStorage, dataReady: crawlStorageReady } = useWebExtensionStorage<string>(crawlStorageKey.value, '')

  // X√≥a d·ªØ li·ªáu crawl khi url thay ƒë·ªïi (n·∫øu crawler b·∫≠t)
  watch(currentUrl, (newUrl, oldUrl) => {
    if (isCrawlerOn.value && oldUrl && oldUrl !== 'ƒêang t·∫£i...') {
      const oldKey = `crawl-content:${oldUrl}`
      chrome.storage.local.remove(oldKey)
    }
    // Reset l·∫°i crawlStorage khi ƒë·ªïi URL ƒë·ªÉ kh√¥ng d√πng l·∫°i n·ªôi dung c≈©
    if (isValidUrl.value) {
      crawlStorage.value = ''
    }
  })

  const { messages, currentMessage, setCurrentMessage, addMessage, clearMessages, undoMessage, redoMessage } = useChatState()

  function getCurrentTabUrl() {
    chrome.tabs.query({ active: true, currentWindow: true }, (tabs: { url: string }[]) => {
      if (tabs && tabs[0]) {
        currentUrl.value = tabs[0].url || ''
        updateFileName()
      }
    })
  }

  function handleTabActivated() {
    getCurrentTabUrl()
  }

  function handleTabUpdated(_tabId: any, changeInfo: { url: string }, tab: { active: any }) {
    if (changeInfo.url && tab.active) {
      currentUrl.value = changeInfo.url
    }
  }

  onMounted(() => {
    getCurrentTabUrl()
    chrome.tabs.onActivated.addListener(handleTabActivated)
    chrome.tabs.onUpdated.addListener(handleTabUpdated)
  })

  onBeforeUnmount(() => {
    chrome.tabs.onActivated.removeListener(handleTabActivated)
    chrome.tabs.onUpdated.removeListener(handleTabUpdated)
  })

  async function sendMessage(isCrawler: boolean) {
    if (!currentMessage.value.trim() || isLoading.value)
      return
    const messageText = currentMessage.value.trim()
    addMessage({ role: 'user', content: messageText })
    setCurrentMessage('')
    isLoading.value = true
    hasError.value = false
    try {
      let response = ''
      if (!isCrawler) {
        // G·ª≠i prompt tr·ª±c ti·∫øp cho AI, kh√¥ng c·∫ßn context b√†i b√°o
        const aiRes = await generateArticleAIResponse({
          messages: [
            { role: 'system', content: 'B·∫°n l√† m·ªôt tr·ª£ l√Ω AI gi√∫p ph√¢n t√≠ch, gi·∫£i th√≠ch, t√≥m t·∫Øt ho·∫∑c tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ ƒëo·∫°n vƒÉn b·∫£n do ng∆∞·ªùi d√πng cung c·∫•p. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu, c√≥ th·ªÉ d√πng emoji.' },
            { role: 'user', content: messageText },
          ],
          model: 'openai',
        })
        response = aiRes.data?.content || 'Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI.'
      }
      else {
        let articleContext = ''
        let articleAnalysis = ''
        if (currentUrl.value && currentUrl.value !== 'ƒêang t·∫£i...') {
          // N·∫øu ƒë√£ c√≥ d·ªØ li·ªáu crawl trong storage th√¨ d√πng lu√¥n
          await crawlStorageReady
          if (isValidUrl.value && crawlStorage.value) {
            articleContext = crawlStorage.value
          }
          else if (isValidUrl.value) {
            // S·ª≠ d·ª•ng Diffbot ƒë·ªÉ extract n·ªôi dung
            const diffbotResult = await extractArticleWithDiffbot(currentUrl.value)
            articleContext = diffbotResult.text
            crawledContent.value = articleContext
            crawlStorage.value = articleContext // L∆∞u v√†o storage

            // T·∫°o ph·∫ßn ph√¢n t√≠ch ƒë∆°n gi·∫£n t·ª´ k·∫øt qu·∫£ Diffbot
            const analysisParts = []
            if (diffbotResult.title)
              analysisParts.push(`üì∞ B√†i vi·∫øt: "${diffbotResult.title}"`)

            if (diffbotResult.date)
              analysisParts.push(`üóìÔ∏è Ng√†y ƒëƒÉng: ${diffbotResult.date}`)

            articleAnalysis = analysisParts.join('\n')
          }
        }
        response = await generateCopilotResponse(messageText, articleContext, articleAnalysis)
      }
      addMessage({ role: 'assistant', content: response })
    }
    catch (error) {
      hasError.value = true
      errorMessage.value = error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh'
      console.error('L·ªói khi g·ª≠i tin nh·∫Øn:', error)
    }
    finally {
      isLoading.value = false
    }
  }

  async function generateCopilotResponse(messageText: string, contextContent: string, articleAnalysis?: string): Promise<string> {
    // Lu√¥n ch·ªù d·ªØ li·ªáu crawl v√† AI tr·∫£ l·ªùi, kh√¥ng tr·∫£ v·ªÅ response m·∫∑c ƒë·ªãnh n√†o
    if (contextContent) {
      try {
        // Prompt tr·ª±c ti·∫øp t·ª´ user, kh√¥ng d√πng createArticlePrompt
        const prompt = `B√†i b√°o:\n${contextContent}\n\nC√¢u h·ªèi c·ªßa t√¥i: ${messageText}`
        const result = await generateArticleAIResponse({
          messages: [
            { role: 'system', content: 'B·∫°n l√† m·ªôt tr·ª£ l√Ω AI gi√∫p ph√¢n t√≠ch b√†i b√°o v√† tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n n·ªôi dung b√†i b√°o. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn, s√∫c t√≠ch, c√≥ th·ªÉ d√πng emoji.' },
            { role: 'user', content: prompt },
          ],
          model: 'openai',
        })
        if (result.success && result.data) {
          return result.data.content
        }
        else {
          throw new Error(result.error || 'Failed to analyze article')
        }
      }
      catch (error) {
        console.error('Error calling Pollinations AI:', error)
        return `Xin l·ªói, t√¥i g·∫∑p l·ªói khi ph√¢n t√≠ch b√†i vi·∫øt: ${error instanceof Error ? error.message : 'Unknown error'}`
      }
    }
    // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu crawl, fallback tr·∫£ l·ªùi ƒë∆°n gi·∫£n
    let response = ''
    if (articleAnalysis) {
      response += `\n\nüìã **Ph√¢n t√≠ch b√†i vi·∫øt hi·ªán t·∫°i:**\n${articleAnalysis}`
    }
    response += `\n\nHi·ªán t·∫°i t√¥i kh√¥ng l·∫•y ƒë∆∞·ª£c n·ªôi dung b√†i b√°o. B·∫°n c√≥ th·ªÉ h·ªèi l·∫°i sau ho·∫∑c th·ª≠ t·∫£i l·∫°i trang.`
    return response
  }

  function handleKeyPress(event: KeyboardEvent, isCrawler: boolean) {
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault()
      sendMessage(isCrawler)
    }
  }

  function updateFileName() {
    try {
      if (currentUrl.value && currentUrl.value !== 'ƒêang t·∫£i...') {
        const url = new URL(currentUrl.value)
        currentFileName.value = url.pathname.split('/').pop() || url.hostname || 'Current Tab'
      }
    }
    catch {
      currentFileName.value = 'Current Tab'
    }
  }

  return {
    // State
    currentUrl,
    isLoading,
    hasError,
    errorMessage,
    crawledContent,
    messages,
    currentMessage,
    selectedModel,
    availableModels,
    chatMode,
    currentFileName,
    isCrawlerOn,
    setCrawlerOn,
    // Methods
    sendMessage,
    generateCopilotResponse,
    handleKeyPress,
    addMessage,
    updateFileName,
    clearMessages,
    undoMessage,
    redoMessage,
  }
}
